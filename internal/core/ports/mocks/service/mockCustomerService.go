// Code generated by MockGen. DO NOT EDIT.
<<<<<<< HEAD
// Source: github.com/sugandhasaxena1911/MyPracticeBankingApp/internal/core/ports/service (interfaces: CustomerService)
=======
// Source: github.com/sugandhasaxena19/MyPracticeBankingApp/internal/core/ports/service (interfaces: CustomerService)
>>>>>>> 27c2bab4ae9973b95478eedee3812fd6c4b17ae0

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
<<<<<<< HEAD
	error "github.com/sugandhasaxena1911/MyPracticeBankingApp/helpers/error"
	dto "github.com/sugandhasaxena1911/MyPracticeBankingApp/internal/core/dto"
=======
	error "github.com/sugandhasaxena19/MyPracticeBankingApp/helpers/error"
	dto "github.com/sugandhasaxena19/MyPracticeBankingApp/internal/core/dto"
>>>>>>> 27c2bab4ae9973b95478eedee3812fd6c4b17ae0
)

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerService) CreateCustomer(arg0 dto.CustomerDTO) (dto.CustomerDTO, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(dto.CustomerDTO)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerServiceMockRecorder) CreateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerService)(nil).CreateCustomer), arg0)
}

// FindAllCustomers mocks base method.
func (m *MockCustomerService) FindAllCustomers() ([]dto.CustomerDTO, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCustomers")
	ret0, _ := ret[0].([]dto.CustomerDTO)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// FindAllCustomers indicates an expected call of FindAllCustomers.
func (mr *MockCustomerServiceMockRecorder) FindAllCustomers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCustomers", reflect.TypeOf((*MockCustomerService)(nil).FindAllCustomers))
}

// FindAllCustomersByStatus mocks base method.
func (m *MockCustomerService) FindAllCustomersByStatus(arg0 string) ([]dto.CustomerDTO, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCustomersByStatus", arg0)
	ret0, _ := ret[0].([]dto.CustomerDTO)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// FindAllCustomersByStatus indicates an expected call of FindAllCustomersByStatus.
func (mr *MockCustomerServiceMockRecorder) FindAllCustomersByStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCustomersByStatus", reflect.TypeOf((*MockCustomerService)(nil).FindAllCustomersByStatus), arg0)
}

// FindCustomerByID mocks base method.
func (m *MockCustomerService) FindCustomerByID(arg0 string) (dto.CustomerDTO, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomerByID", arg0)
	ret0, _ := ret[0].(dto.CustomerDTO)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// FindCustomerByID indicates an expected call of FindCustomerByID.
func (mr *MockCustomerServiceMockRecorder) FindCustomerByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomerByID", reflect.TypeOf((*MockCustomerService)(nil).FindCustomerByID), arg0)
}
